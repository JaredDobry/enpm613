openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "ShiftChange API"
  description: Learning Management System utilizing Kanban

paths:
  /user/{userId}:
    parameters:
      - name: userId
        description: The uuid of the User
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The user corresponding to userId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{userId}/enrollments:
    parameters:
      - name: userId
        description: The uuid of the User
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The enrollments corresponding to userId
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Enrollment"
        404:
          description: User has no enrollments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{userId}/assignments:
    parameters:
      - name: userId
        description: The uuid of the User
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The assignments corresponding to all classes userId is enrolled in
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assignment"
        404:
          description: User has no assignments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /class/{classId}:
    parameters:
      - name: classId
        description: The uuid of the Class
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The class corresponding to this classId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Class"
        404:
          description: Class does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /class/{classId}/materials:
    parameters:
      - name: classId
        description: The uuid of the Class
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The course materials for this class
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseMaterial"
        404:
          description: Class has no materials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /class/{classId}/assignments:
    parameters:
      - name: classId
        description: The uuid of the Class
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The assignments for this class
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assignment"
        404:
          description: Class has no assignments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /assignment/{assignmentId}:
    parameters:
      - name: assignmentId
        description: The uuid of the Assignment
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The assignment for this uuid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assignment"
        404:
          description: Assignment does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /assignment/{assignmentId}/status/{userId}:
    parameters:
      - name: assignmentId
        description: The uuid of the Assignment
        in: path
        required: true
        schema:
          type: string
      - name: userId
        description: The uuid of the User
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The status for this assignment for the given user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentStatus"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /assignment/{assignmentId}/submissions:
    parameters:
      - name: assignmentId
        description: The uuid of the Assignment
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: All submissions for this assignment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Submission"
        404:
          description: Assignment has no submissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /assignment/{assignmentId}/submissions/{userId}:
    parameters:
      - name: assignmentId
        description: The uuid of the Assignment
        in: path
        required: true
        schema:
          type: string
      - name: userId
        description: The uuid of the User
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: All submissions for this assignment by the given user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Submission"
        404:
          description: Assignment has no submissions from the given user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /assignment/{assignmentId}/comments/{studentId}:
    parameters:
      - name: assignmentId
        description: The uuid of the Assignment
        in: path
        required: true
        schema:
          type: string
      - name: studentId
        description: The uuid of the student being communicated with
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: All comments for this assignment and student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        404:
          description: Assignment has no comments for the given student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /assignment/{assignmentId}/grade/{userId}:
    parameters:
      - name: assignmentId
        description: The uuid of the Assignment
        in: path
        required: true
        schema:
          type: string
      - name: userId
        description: The uuid of the User
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: The grade for this user on this assignment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Grade"
        404:
          description: No grade assigned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /login:
    post:
      description: "Log into ShiftChange"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPost"
      responses:
        200:
          description: "Successful login request"
          content:
            application/json:
              schema:
                description: Login session token
                type: string
        401:
          description: "Failed to login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /comment:
    post:
      description: "Post a comment to an assignment"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentPost"
    responses:
      200:
        description: "Successfully added comment"
        content:
          application/json:
            schema:
              description: The unique ID of the added comment
              type: string
      401:
        description: "Unauthorized POST attempt"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      500:
        description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /status:
    post:
      description: "Update the status of an assignment"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusPost"
    responses:
      200:
        description: "Successfully updated status"
      401:
        description: "Unauthorized POST attempt"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      500:
        description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /submission:
    post:
      description: "Upload a submission for an assignment"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionPost"
    responses:
      200:
        description: "Successfully uploaded submission"
        content:
          application/json:
            schema:
              description: "The unique ID of the new submission"
              type: string
      401:
        description: "Unauthorized POST attempt"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      500:
        description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        sysadmin:
          type: boolean
    Class:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
    Enrollment:
      type: object
      required:
        - user_id
        - class_id
        - enrollment_type
      properties:
        user_id:
          type: string
          format: uuid
        class_id:
          type: string
          format: uuid
        enrollment_type:
          enum:
            - student
            - teaching_assistant
            - professor
    CourseMaterial:
      type: object
      required:
        - id
        - class_id
        - name
        - link
      properties:
        id:
          type: string
          format: uuid
        class_id:
          type: string
          format: uuid
        name:
          type: string
        link:
          type: string
    Assignment:
      type: object
      required:
        - id
        - class_id
        - link
        - name 
      properties:
        id:
          type: string
          format: uuid
        class_id:
          type: string
          format: uuid
        description:
          type: string
        link:
          type: string
        name:
          type: string
    AssignmentStatus:
      type: object
      required:
        - assignment_id
        - user_id
        - status
      properties:
        assignment_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        status:
          enum:
            - todo
            - inwork
            - complete
    Submission:
      type: object
      required:
        - id
        - assignment_id
        - link
        - name
        - timestamp
      properties:
        id:
          type: string
          format: uuid
        assignment_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        link:
          type: string
        name:
          type: string
        timestamp:
          type: string
          format: date-time
    Grade:
      type: object
        required:
          - assignment_id
          - user_id
          - grade
        properties:
          assignment_id:
            type: string
            format: uuid
          user_id:
            type: string
            format: uuid
          grade:
            type: number
            format: float
    Comment:
      type: object
      required:
        - id
        - assignment_id
        - student_id
        - author_id
        - text
        - timestamp
      properties:
        id:
          type: string
          format: uuid
        assignment_id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        text:
          type: string
        timestamp:
          type: string
          format: date-time
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    LoginPost:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          description: SHA-256 hash of password
          type: string
    AuthenticatedPost:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    CommentPost:
      allOf:
        - $ref: "#/components/schemas/AuthenticatedPost"
        - type: object
          required:
            - comment
          properties:
            comment:
              $ref: "#/components/schemas/Comment"
    StatusPost:
      allOf:
        - $ref: "#/components/schemas/AuthenticatedPost"
        - type: object
          required:
            - status
          properties:
            status:
              $ref: "#/components/schemas/Status"
    SubmissionPost:
      allOf:
        - $ref: "#/components/schemas/AuthenticatedPost"
        - type: object
          required:
            - blob
            - submission
          properties:
            blob:
              description: The contents of the file read from javascript's Blob.text()
              type: string
            submission:
              $ref: "#/components/schemas/Submission"